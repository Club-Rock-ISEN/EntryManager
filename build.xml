<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="build" name="Club Rock ISEN" basedir=".">
	<description>
		Ant build file for the Club Rock ISEN application.
	</description>

	<!-- ###### PROPERTIES ###### -->
	<property environment="env" />
	<property name="src.dir" value="${basedir}/src" description="The source directory." />
	<property name="bin.dir" value="${basedir}/bin" description="The target directory for the class files." />
    <property name="test.dir" value="${basedir}/test" description="The unit test directory." />
	<property name="conf.dir" value="${basedir}/conf" description="The configuration directory." />
	<property name="data.dir" value="${basedir}/data" description="The data directory with the file needed by the application." />
	<property name="lib.dir" value="${basedir}/lib" description="The library directory." />
	<property name="doc.dir" value="${basedir}/doc" description="The javadoc directory." />
    <property name="reports.dir" value="${basedir}/report" description="The reporting directory." />
	<property name="target.dir" value="${basedir}/target/" description="The target directory for the generated executable files." />
	<property name="target.lib.dir.name" value="lib" description="The name of the libraries directory in the target folder." />
	<property name="target.data.dir.name" value="data" description="The name of the data directory in the target folder." />
	<property name="launcher.name" value="crock.bat" description="The name of the launcher for the jar." />
	<property name="launcher" value="${data.dir}/${launcher.name}" description="The launcher for the jar." />
	<property name="archive.name" value="crock.zip" description="The archive name." />
	<property name="main.class" value="org.clubrockisen.App" description="The entry point of the application." />

	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
	</path>

	<!-- ###### TARGETS ###### -->
	<!-- ================================= 
          target: init              
		         ================================= -->
	<target name="init" description="Create the ${bin.dir} directory.">
		<mkdir dir="${bin.dir}" />
	</target>
	
	<!-- ================================= 
          target: clean              
		         ================================= -->
	<target name="clean" description="Clean the files created during the compilation (${bin.dir} directory).">
		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${bin.dir}" includes="**/*" />
		</delete>
	</target>
	
	<!-- ================================= 
          target: cleanInstall              
		         ================================= -->
    <target name="cleanInstall" depends="clean" description="Clean all the files exect the archive.">
        <delete includeemptydirs="true" verbose="true">
			<fileset dir="${target.dir}" includes="**/*" />
        	<fileset dir="${doc.dir}" includes="**/*" />
            <fileset dir="${reports.dir}" includes="**/*" />
		</delete>
    </target>
	
	<!-- ================================= 
          target: cleanDeep              
		         ================================= -->
    <target name="cleanDeep" depends="cleanInstall" description="Clean every file generated by the script (jars, doc, class).">
        <delete file="${archive.name}" />
    </target>

	<!-- ================================= 
	          target: build              
	         ================================= -->
	<target name="build" depends="init" description="Compile the source files.">
		<javac srcdir="${src.dir}" destdir="${bin.dir}" includeantruntime="false" classpathref="classpath" />
	</target>
    
	<!-- ================================= 
	          target: jar              
	         ================================= -->
	<target name="jar" depends="build" description="Creates an executable jar file from the classes.">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.dir}/${target.data.dir.name}" />
		<!-- Creating a property with all the library in the lib.dir -->
		<pathconvert property="projectLibs" pathsep=" ">
			<mapper>
				<chainedmapper>
					<!-- remove absolute path -->
					<flattenmapper />
					<!-- add lib/ prefix -->
					<globmapper from="*" to="${target.lib.dir.name}/*" />
				</chainedmapper>
			</mapper>
			<path>
				<!-- lib.home contains all jar files, in several subdirectories -->
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</pathconvert>
		<!-- Copying the libraries in the target library folder -->
		<copy todir="${target.dir}/${target.lib.dir.name}">
			<fileset dir="${lib.dir}" id="id">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<!-- Copying the resources files required by the application -->
		<copy todir="${target.dir}/${target.data.dir.name}">
			<fileset dir="${data.dir}"
				includes="**/*"
				excludes="**/${launcher.name}" />
		</copy>
		<!-- Finally, creating the jar -->
		<jar destfile="${target.dir}/${ant.project.name}.jar" basedir="${bin.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main.class}" />
				<attribute name="Class-Path" value="${projectLibs}" />
			</manifest>
		</jar>
		<!-- And copying the launche -->
		<copy todir="${target.dir}">
			<fileset file="${launcher}" />
		</copy>
	</target>

	<!-- ================================= 
		          target: run              
		         ================================= -->
	<target name="run" depends="jar" description="Run the jar file">
		<java jar="${target.dir}/${ant.project.name}.jar" fork="true">
			<classpath>
				<path refid="classpath" />
				<path location="${target.dir}/${ant.project.name}.jar" />
			</classpath>
		</java>
	</target>
	
	<!-- ================================= 
          target: archive              
		         ================================= -->
    <target name="archive" depends="jar" description="Gather and archive the executable and the required files.">
        <zip destfile="${basedir}/${archive.name}">
        	<fileset dir="${target.dir}">
        		<include name="**/*" />
        	</fileset>
        </zip>
    </target>

	<!-- ================================= 
			          target: rebuild              
			         ================================= -->
	<target name="rebuild" depends="clean, build" description="Rebuild the project (clean and compile)." />

	<!-- ================================= 
			          target: javadoc              
			         ================================= -->
	<target name="javadoc" description="Create the javadoc">
		<mkdir dir="${doc.dir}" />
		<javadoc destdir="${doc.dir}" windowtitle="Club Rock ISEN">
			<fileset dir="${src.dir}" defaultexcludes="true">
				<include name="org/clubrockisen/**" />
			</fileset>
		</javadoc>
	</target>

	<!-- ================================= 
			          target: test              
			         ================================= -->
	<target name="test" description="Run the unit tests">
	    <mkdir dir="${reports.dir}" />
		<junit fork="yes" forkmode="once">
			<classpath>
				<path refid="classpath" />
				<path location="${bin.dir}" />
			    <fileset dir="${lib.dir}">
			        <include name="**/*.jar" />
			    </fileset>
			</classpath>
			<formatter type="xml" />
			<batchtest todir="${reports.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
    

	<!-- ###### SONAR ###### -->
	<!-- The task -->
	<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
		<classpath path="${ant.home}/lib/sonar-ant-task-1.4.jar" />
	</taskdef>
	<!-- The properties -->
	<property name="sonar.host.url" value="http://0.0.0.0:9090" />
	<property name="sonar.jdbc.url" value="jdbc:mysql://0.0.0.0:3306/sonar?useUnicode=true&amp;characterEncoding=utf8" />
	<property name="sonar.jdbc.driverClassName" value="com.mysql.jdbc.Driver" />
	<property name="sonar.jdbc.username" value="sonar" />
	<property name="sonar.jdbc.password" value="sonar" />
    <property name="sonar.java.source" value="${ant.java.version}" />
    <property name="sonar.java.target" location="${ant.java.version}" />
	<property name="sonar.sources" value="${src.dir}" />
	<property name="sonar.binaries" value="${bin.dir}" />
    <property name="sonar.tests" value="${test.dir}" />
	<property name="sonar.surefire.reportsPath" value="${reports.dir}" />   
	<property name="sonar.dynamicAnalysis" value="true" />
    <property name="sonar.jacoco.antTargets" value="test" />


	<!-- ================================= 
			          target: sonar              
			         ================================= -->
	<target name="sonar" depends="build" description="Start the sonar analysis">
		<sonar:sonar key="org.clubrockisen:app" version="0.1-SNAPSHOT" xmlns:sonar="antlib:org.sonar.ant" />
	</target>

</project>